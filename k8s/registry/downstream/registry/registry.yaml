#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")

#@ d = data.values.domain or assert.fail("missing domain definition")
#@ w = data.values.wildcard_domain or assert.fail("missing wildcard_domain definition")

#@ def labels():
app: #@ data.values.registry.name
org: #@ data.values.org
#@ end

#@ registry_name = "{}.{}".format(data.values.registry.name, data.values.domain)
#@ docker_auth = base64.encode("{}:{}".format(data.values.registry.admin.username, data.values.registry.admin.password))
#@ docker_creds = {"username": data.values.registry.admin.username, "password": data.values.registry.admin.password, "auth": docker_auth}

---
#@ if "default" != data.values.registry.namespace and data.values.ingress.namespace != data.values.registry.namespace:
apiVersion: v1
kind: Namespace
metadata:
  name: #@ data.values.registry.namespace
#@ end
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-config".format(data.values.registry.name)
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
type: Opaque
data:
  htpasswd: #@ base64.encode(yaml.encode(data.values.registry.secrets.htpasswd))
  haSharedSecret: #@ base64.encode(yaml.encode(data.values.registry.secrets.hashared))
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: #@ "{}-config".format(data.values.registry.name)
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
data:
  config.yml: |-
    health:
      storagedriver:
        enabled: true
        interval: 10s
        threshold: 3
    http:
      addr: :5000
      headers:
        X-Content-Type-Options:
        - nosniff
    log:
      fields:
        service: registry
    storage:
      cache:
        blobdescriptor: inmemory
    version: 0.1
---
apiVersion: v1
kind: Service
metadata:
  name: #@ (data.values.registry.name)
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
spec:
  type: ClusterIP
  ports:
    - port: 5000
      protocol: TCP
      name: registry
      targetPort: 5000
  selector:
    app: #@ (data.values.registry.name)
    release: #@ (data.values.registry.name)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: #@ data.values.registry.name
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
spec:
  selector:
    matchLabels:
      app: #@ data.values.registry.name
      release: #@ data.values.registry.name
  replicas: 1
  minReadySeconds: 5
  template:
    metadata:
      labels:
        app: #@ data.values.registry.name
        release: #@ data.values.registry.name
    spec:
      securityContext:
        fsGroup: 1000
        runAsUser: 1000
      containers:
        - name: #@ data.values.registry.name
          image: "registry:2.7.1"
          imagePullPolicy: IfNotPresent
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          ports:
            - containerPort: 5000
          livenessProbe:
            httpGet:
              path: /
              port: 5000
          readinessProbe:
            httpGet:
              path: /
              port: 5000
          resources:
            {}
          env:
            - name: REGISTRY_AUTH
              value: "htpasswd"
            - name: REGISTRY_AUTH_HTPASSWD_REALM
              value: "Registry Realm"
            - name: REGISTRY_AUTH_HTPASSWD_PATH
              value: "/auth/htpasswd"
            - name: REGISTRY_HTTP_SECRET
              valueFrom:
                secretKeyRef:
                  name: #@ "{}-config".format(data.values.registry.name)
                  key: haSharedSecret
            - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
              value: "/var/lib/registry"
          volumeMounts:
            - name: auth
              mountPath: /auth
              readOnly: true
            - name: data
              mountPath: /var/lib/registry/
            - name: #@ "{}-config".format(data.values.registry.name)
              mountPath: "/etc/docker/registry"
      volumes:
        - name: auth
          secret:
            secretName: #@ "{}-config".format(data.values.registry.name)
            items:
            - key: htpasswd
              path: htpasswd
        - name: data
          emptyDir: {}
        - name: #@ "{}-config".format(data.values.registry.name)
          configMap:
            name: #@ "{}-config".format(data.values.registry.name)
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  annotations:
    kubernetes.io/ingress.class: #@ data.values.ingress.type
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  name: #@ data.values.registry.name
  namespace: #@ data.values.registry.namespace
  labels: #@ labels()
spec:
  rules:
  - host: #@ registry_name
    http:
      paths:
      - backend:
          serviceName: #@ data.values.registry.name
          servicePort: 5000
        path: /
  tls:
  - hosts:
    - #@ registry_name
    secretName: wildcard
---
#! Secret for registry in operator install as namespace needs to exist
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-creds".format(data.values.registry.name)
  namespace: #@ data.values.registry.namespace
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: #@ base64.encode(json.encode({"auths": {registry_name: docker_creds}}))

---
apiVersion: failk8s.dev/v1alpha1
kind: SecretCopierConfig
metadata:
  name: #@ "{}-creds".format(data.values.registry.name)
spec:
  rules:
  - sourceSecret:
      name: #@ "{}-creds".format(data.values.registry.name)
      namespace: #@ data.values.registry.namespace
    targetNamespaces:
      labelSelector:
        matchLabels:
          developer-namespace: "yes"
---
apiVersion: failk8s.dev/v1alpha1
kind: SecretInjectorConfig
metadata:
  name: #@ "{}-creds".format(data.values.registry.name)
spec:
  rules:
  - sourceSecrets:
      nameSelector:
        matchNames:
        - #@ "{}-creds".format(data.values.registry.name)
    serviceAccounts:
      nameSelector:
        matchNames:
        - default