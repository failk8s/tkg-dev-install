#@ load("@ytt:data", "data")
#@ load("@ytt:base64", "base64")
#@ load("@ytt:assert", "assert")

#@ d = data.values.domain or assert.fail("missing domain definition")
#@ w = data.values.wildcard_domain or assert.fail("missing wildcard_domain definition")

---
apiVersion: v1
kind: Secret
metadata:
  name: aws-route53-creds
  namespace: cert-manager
data:
  aws-credentials: #@ base64.encode(data.values.aws_secret_access_key)

---

apiVersion: cert-manager.io/v1alpha2
kind: ClusterIssuer
metadata:
  name: wildcard-lets-encrypt
spec:
  acme:
    email: #@ data.values.certs.email
    privateKeySecretRef:
      name: eduk8s-wildcard-acme
    server: https://acme-v02.api.letsencrypt.org/directory
    solvers:
    - dns01:
        route53:
          region: #@ data.values.certs.region
          accessKeyID: #@ data.values.aws_access_key_id
          secretAccessKeySecretRef:
            name: aws-route53-creds
            key: aws-credentials
    - http01:
        ingress:
          class: #@ data.values.ingress.type

---

apiVersion: cert-manager.io/v1alpha2
kind: Certificate
metadata:
  name: wildcard
  namespace: #@ data.values.ingress.namespace
spec:
  secretName: wildcard
  issuerRef:
    name: wildcard-lets-encrypt
    kind: ClusterIssuer
  dnsNames:
  - #@ "*.{}".format(d)
  - #@ "*.{}".format(w)

---

#! We add a certificate delegation. This might avoid us the need to copy the wildcard cert
#! to every namespace and instead reference the wildcard cert on this namespace from any ingress
apiVersion: projectcontour.io/v1
kind: TLSCertificateDelegation
metadata:
  name: wildcard
  namespace: #@ data.values.ingress.namespace
spec:
  delegations:
    - secretName: wildcard
      targetNamespaces:
        - "*"

---

apiVersion: failk8s.dev/v1alpha1
kind: SecretCopierConfig
metadata:
  name: wildcard
spec:
  rules:
  - sourceSecret:
      name: wildcard
      namespace: #@ data.values.ingress.namespace
