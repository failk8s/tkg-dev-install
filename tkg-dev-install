#!/usr/local/bin/bash
#
# Note: This script requires bash 4+
#

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -uo pipefail

declare -A steps
steps['cert-manager.1.name']='cert-manager'
steps['cert-manager.1.path']='k8s/cert-manager/'
#
steps["ingress.1.name"]="ingress"
steps["ingress.1.path"]="k8s/ingress/"
#
steps["knative.1.name"]="knative"
steps["knative.1.path"]="k8s/knative/"
#
steps["kpack.1.name"]="kpack"
steps["kpack.1.path"]="k8s/kpack/"
#
steps["kubeapps.1.name"]="kubeapps"
steps["kubeapps.1.path"]="k8s/kubeapps/"
#
steps["registry.1.name"]="registry"
steps["registry.1.path"]="k8s/registry/"
#
steps["tekton.1.name"]="tekton-release"
steps["tekton.1.path"]="k8s/tekton/release/"
steps["tekton.2.name"]="tekton-triggers"
steps["tekton.2.path"]="k8s/tekton/triggers/"
steps["tekton.3.name"]="tekton-dashboard"
steps["tekton.3.path"]="k8s/tekton/dashboard/"
#
steps["eduk8s.1.name"]="eduk8s"
steps["eduk8s.1.path"]="k8s/eduk8s/"
#
steps["wavefront.1.name"]="wavefront"
steps["wavefront.1.path"]="k8s/wavefront/"

#install_log=$(mktemp install.log.XXXXXX)
install_log=install.log

SCRIPT_NAME=$(basename "$0")
# Handle source locations that might be a symlink (ref: http://bit.ly/2kcvSCS)
SOURCE="${BASH_SOURCE[0]}"
while [ -h "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"
  SOURCE="$(readlink "$SOURCE")"
  [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE" # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
WORK_DIR="$( cd -P "$( dirname "$SOURCE" )" && pwd )"

#
# Colors for echo
# 
RED='\033[0;31m'
NC='\033[0m' # No Color

CLUSTER=`kubectl config view -o jsonpath='{ .contexts[?(@.name == "'$(kubectl config current-context 2>/dev/null)'")].context.cluster }' 2>/dev/null`
[ "x$CLUSTER" == "x" ] && echo "kubectl could not determine current cluster or is not installed" && exit 1


#
# CLI_ARGS
SHOW_HELP="n"
OVERRIDE_FILE=${OVERRIDE_FILE:-""}
OVERLAY_FILE=${OVERLAY_FILE:-""}
CONFIRM=${CONFIRM:-""}
VERIFY=${VERIFY:-""}
file_opt=""
overlay_opt=""

#
# Args:
#  $1: app_name 
#  $2: path
function install_command {
  local app_name=$1
  local path=$2
  [ -z "$app_name" ] || [ -z "$path" ] && echo "Error" && exit 1

  echo "ytt -f ${WORK_DIR}/k8s/values.yaml ${file_opt} -f ${WORK_DIR}/$path ${overlay_opt} --ignore-unknown-comments | kapp deploy -a $app_name --diff-changes -n default -y -f -"
  ytt -f ${WORK_DIR}/k8s/values.yaml ${file_opt} -f ${WORK_DIR}/$path ${overlay_opt} --ignore-unknown-comments | kapp deploy -a $app_name --diff-changes -n default -y -f -
}

function execute_all {
  local step_name=$1
  for i in {1..5}; do
    if [ ! -z "${steps[$step_name.$i.name]:-}" ]; then
      install_command "${steps[$step_name.$i.name]:-}" "${steps[$step_name.$i.path]:-}"
    fi
  done
}

# for step in cert-manager ingress knative kpack kubeapps registry tekton; do
#   execute_all $step
# done
# execute_all tekton

# exit 1

function help {
  echo "This is the ${FUNCNAME[0]} for ${SCRIPT_NAME}"
  echo ""
  echo "${SCRIPT_NAME} <COMMAND> <OPTIONS>"
  echo ""
  echo "Command:"
  echo "    cert-manager       Installs cert-manager"
  echo "    ingress            Installs an ingress controller to be used by the platform"
  echo "    registry           Installs a clusterwide registry to be used by the platform"
  echo "    kpack              Installs KPack to support in cluster builds using CNB"
  echo "    tekton             Installs Tekton to support pipelines"
  echo "    knative            Installs KNative to support scale to zero"
  echo ""
  echo "    full               Full install"

  help-options
}

function help-options {
  echo ""
  echo "Options:"
  echo "    -f=<FILE>|--file=<FILE>"
  echo "    -f|--file <FILE>           Provides an override file to change default values"
  echo "    -c|--confirm               Don't ask for confirmation. Execute the action immediately"
  echo "    -v|--verify                Verifies the result of the process by executing a verification step"
  echo "    -o=<FILE>|--overlay=<FILE>"
  echo "    -o|--overlay <FILE>        Provides an overlay file, to alter install scripts"
  echo "    -h|--help                  Shows the help for the command"
}

function execute {
  local step=$1
  shift
  parse_args $*

  [ "$SHOW_HELP" == "true" ] && help $step && return 0

  if [ ! -z $OVERRIDE_FILE ] ; then 
    if [ -f $OVERRIDE_FILE ]; then
      file_opt=" -f $OVERRIDE_FILE "
    else
      echo "$OVERRIDE_FILE does not exist"
      exit 1
    fi
  fi

  if [ ! -z $OVERLAY_FILE ] ; then 
    if [ -f $OVERLAY_FILE ]; then
      overlay_opt=" -f $OVERLAY_FILE "
    else
      echo "$OVERLAY_FILE does not exist"
      exit 1
    fi
  fi

  if [ -n "$CONFIRM" ] && [ "$CONFIRM" == "true" ] ; then
    reply="y"
  else
    echo -e "Cluster: ${RED}${CLUSTER}${NC}"
    echo -e "Configuration: ${RED}${OVERRIDE_FILE}${NC}"
    echo -e "Overlay: ${RED}${OVERLAY_FILE}${NC}"
    echo ""
    echo -e "Are you sure you want to install an $step with the following values? (y/n)"
    read -n 1 -r reply
    echo # move to a new line
  fi
  
  if [[ $reply =~ ^[Yy]$ ]] ; then
    execute_all $step
  else
    echo "Installation cancelled"
    exit 1
  fi
}

function help { 
  local script=${1:-}
  echo "Create a $script" 
  echo ""
  echo "${SCRIPT_NAME} $script <OPTIONS>"
  help-options
}

function full-dev {
  parse_args $*

  [ "$SHOW_HELP" == "true" ] && help.all && return 0

  for step in cert-manager ingress registry kpack tekton knative kubeapps wavefront ; do
    execute $step
  done
}

function full-eduk8s {
  parse_args $*

  [ "$SHOW_HELP" == "true" ] && help.all && return 0

  for step in cert-manager ingress registry kpack tekton knative kubeapps wavefront eduk8s ; do
    execute $step
  done
}

function help.all {
  echo "Installs all neccesary additional components into an existing cluster"
  help-options   
} 

function parse_args {
  while [[ $# -gt 0 ]]
  do
    local key="$1"
    case $key in
      -h|--help)
        SHOW_HELP="true"
        shift # past argument
        ;;
      -v|--verify)
        VERIFY="true"
        shift # past argument
        ;;
      -f|--file)
        OVERRIDE_FILE="$2"
        shift # past argument
        shift # past value
        ;;
      -f=*|--file=*)
        OVERRIDE_FILE="${i#*=}"
        shift # past argument
        ;;
      -o|--overlay)
        OVERLAY_FILE="$2"
        shift # past argument
        shift # past value
        ;;
      -o=*|--overlay=*)
        OVERLAY_FILE="${i#*=}"
        shift # past value
        ;;
      -c|--confirm)
        CONFIRM="true"
        shift # past argument
        ;;
      *)
        echo "Wrong argument $key. Not supported"
        exit 1
        ;;
    esac
  done
#  echo "SHOW_HELP=$SHOW_HELP"
#  echo "OVERRIDE_FILE=$OVERRIDE_FILE"
#  echo "OVERLAY_FILE=$OVERLAY_FILE"
#  echo "CONFIRM=$CONFIRM"
}

if [[ $# -gt 0 ]]
then
  key="$1"
  case $key in
    ingress)
      shift # past argument
      execute ingress "$@"
      ;;
    cert-manager)
      shift # past argument
      execute cert-manager "$@"
      ;;
    registry)
      shift # past argument
      execute registry "$@"
      ;;
    kpack)
      shift # past argument
      execute kpack "$@"
      ;;
    tekton)
      shift # past argument
      execute tekton "$@"
      ;;
    knative)
      shift # past argument
      execute knative "$@"
      ;;
    kubeapps)
      shift # past argument
      execute kubeapps "$@"
      ;;
    eduk8s)
      shift # past argument
      execute eduk8s "$@"
      ;;
    wavefront)
      shift # past argument
      execute wavefront "$@"
      ;;
    full-dev)
      shift # past argument
      full-dev "$@"
      ;;
    full-eduk8s)
      shift # past argument
      full-eduk8s "$@"
      ;;
    *)
      help "cert-manager|ingress|registry|kpack|tekton|knative|kubeapps|wavefront|eduk8s|full-dev|full-eduk8s"
      ;;
  esac
else
  help "cert-manager|ingress|registry|kpack|tekton|knative|kubeapps|wavefront|eduk8s|full-dev|full-eduk8s"
fi
